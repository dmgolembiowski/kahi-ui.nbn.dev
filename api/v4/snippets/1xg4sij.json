{"data":{"identifier":"1xg4sij","script":"@use \"../../../../framework/abstracts/variables\";\n\n// NOTE: By using this if statement, `--disable-components-display-badge` turns off this file in custom builds\n@if not env(\"DISABLE_COMPONENTS_DISPLAY_BADGE\") {\n    // NOTE: Every identifier + dot path is treated is treated as a namespaced CSS Custom Property,\n    // e.g. `badge.background.opacity` will be built as `--badge-background-opacity`\n    @include variables.define(\n        (\n            \"badge\": (\n                // NOTE: Whenever a namespace only has one (1) member instead of multiple, we can\n                // just shortcut to using a period instead of creating a new map like the `font` namespace\n                \"background.opacity\": 1,\n                \"border.radius\": none,\n                \"color.opacity\": 1,\n                \"font\": (\n                    // NOTE: `variables.use` is used to look up variables registered to the global\n                    // themeing variables. This allows the build process to validate our variables exist\n                    \"size\": variables.use(\"fonts.sizes.inline.nano\"),\n                    \"weight\": bold,\n                ),\n                \"gap\": (\n                    \"x\": variables.use(\"spacings.block.small\"),\n                    \"y\": variables.use(\"spacings.block.small\"),\n                ),\n                \"padding\": (\n                    \"x\": variables.use(\"spacings.block.small\"),\n                    \"y\": variables.use(\"spacings.block.nano\"),\n                ),\n            ),\n        )\n    );\n}","syntax":"scss","title":"1xg4sij"}}