{"data":{"identifier":"keybind-throttle-cancel","script":"<script>\n    import {\n        Box,\n        Code,\n        TextInput,\n        Scrollable,\n        Stack,\n        keybind,\n    } from \"@kahi-ui/framework\";\n    import {tick} from \"svelte\";\n\n    let scrollable_element;\n\n    let active = false;\n    let current = 0;\n\n    async function update_scrollable() {\n        // NOTE: Have to wait for the DOM to update after our render runs again\n        await tick();\n\n        const current_element =\n            scrollable_element.querySelector(\n                `[data-palette=\"accent\"]`\n            );\n\n        if (current_element) {\n            current_element.scrollIntoView({\n                block: \"nearest\",\n                behavior: \"smooth\",\n            });\n        }\n    }\n</script>\n\n<TextInput\n    palette={active ? \"affirmative\" : \"negative\"}\n    placeholder=\"Focus me and press and hold ARROWDOWN / ARROWUP\"\n    actions={[\n        [\n            keybind,\n            {\n                binds: \"arrowdown\",\n                repeat: true,\n                repeat_throttle: 100,\n                throttle_cancel: true,\n                on_bind: (event) => {\n                    if (!event.detail.active) return;\n                    event.preventDefault();\n\n                    current = Math.min(current + 1, 9);\n                    update_scrollable();\n                },\n            },\n        ],\n        [\n            keybind,\n            {\n                binds: \"arrowup\",\n                repeat: true,\n                repeat_throttle: 100,\n                throttle_cancel: true,\n                on_bind: (event) => {\n                    if (!event.detail.active) return;\n                    event.preventDefault();\n\n                    current = Math.max(current - 1, 0);\n                    update_scrollable();\n                },\n            },\n        ],\n    ]}\n    on:focusin={() => (active = true)}\n    on:focusout={() => (active = false)}\n/>\n\n<Box>\n    <Scrollable\n        bind:element={scrollable_element}\n        style=\"height:5rem;\"\n    >\n        {#each new Array(10).fill(null) as _, index}\n            <Box\n                palette={current === index\n                    ? \"accent\"\n                    : \"auto\"}\n            >\n                Search Result #{index + 1}\n            </Box>\n        {/each}\n    </Scrollable>\n</Box>","title":"keybind Throttle Cancel"}}